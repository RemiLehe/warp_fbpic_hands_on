#!/usr/bin/env python
##########################################################################
# Author: David P. Grote
# Date: 6/7/2005
# Adapted to make jpeg files and crop them by Alex Friedman, 10/17/2007
##########################################################################
# This script converts sequential frames from a cgm file into jpeg files.
# They are all put into a new directory that has the same name as the
# cgm file prefix.
# Note that it relies on gist and gs. All input files are first converted
# into a series of ps files, one per frame. Then ps is converted to jpeg.
# Then the jpeg files are cropped.
#
# To use it, type
#
# convertcgmtojpg.py number_of_frames full_filename
#
# The resulting files can be converted to a .mov file using QuickTime Pro
# on a Mac, or by other means
#
##########################################################################

import sys
import os
import string
import re

# --- Print out usage line if needed.
if len(sys.argv) < 3 or len(sys.argv) > 5:
  print('Error: command line had the wrong format, must be one of')
  print('convertcgmtojpg.py filename numframes')
  print('convertcgmtojpg.py filename framestart frameend framestep')

# --- Get the filename
file = sys.argv[1]
m = re.search(r'(.+)[.](\w+)',file)
prefix = m.group(1)
suffix = m.group(2)

# --- Get the frames to be processed.
if len(sys.argv) == 3:
  numframes = string.atoi(sys.argv[2])
  framestart = 1
  frameend = numframes
  framestep = 1
elif len(sys.argv) in [4,5]:
  framestart = string.atoi(sys.argv[2])
  frameend = string.atoi(sys.argv[3])
  if len(sys.argv) == 5:
    framestep = string.atoi(sys.argv[4])
  else:
    framestep = 1
  numframes = frameend - framestart + 1
  
##########################################################################
# --- CGM
# --- Use gist to extract frames into ps files and then use gs to convert
# --- to ppm.
##########################################################################
# --- Convert each frame to a ps file using gist
os.system('mkdir %s'%prefix)
if suffix=='cgm':
  print('extracting frames to ps file')
  gist = os.popen('gist -nd -in '+file,'w')
  gist.write('ps %s/temp.ps\n'%prefix)
  gist.write('send %d-%d-%d\n'%(framestart,frameend,framestep))
  gist.write('quit\n')
  gist.close()


##########################################################################
# --- Convert ps to jpeg.
##########################################################################
# --- NOPAUSE disables the prompt after each frame is processed
# --- < /dev/null gets gs to exit without requiring a ctrl-d by the user
# --- The - gets gs to not print the GS> prompt.
# --- The -r100 arranges for 100 DPI
print('converting ps to ppm')
os.chdir(prefix)
res=150
res=200
os.system('gs -DNOPAUSE -sDEVICE=jpeg -r%g -sOutputFile=%s.%%06d.jpg temp.ps - < /dev/null'%(res,prefix))
os.chdir('..')

# --- Remove ps file
os.system('rm -f %s/temp.ps'%prefix)

##########################################################################
# --- Crop the jpeg files using MOGRIFY from ImageMagick
##########################################################################
# --- Parameters chosen to yield 640x640 image that contains title and limited
# --- legend information when applied to standard WARP output.
getfiles = 'find . -name "*.jpg" -print'

os.chdir(prefix)
for file in os.popen(getfiles).readlines():
  name = file[:-1]
  print('cropping file '+name)
  a=int(640*float(res)/100)
#  b=int(640*float(res)/100)
  b=int(600*float(res)/100)
  c=int(105*float(res)/100)
  d=int(124*float(res)/100)
  os.system('mogrify -crop %gx%g+%g+%g '%(a,b,c,d)+name)
  
os.chdir('..')















